pipeline {

    /* app: https://github.com/elnook/notedo */

    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '30'))
    }
    // triggers { pollSCM('@daily') }
    
    stages {
        stage('Prep') {
            steps {
                echo "Building at ${WORKSPACE}"
                // checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/cmeinco/notedo-testbed']]]
                
                // checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/elnook/notedo']]]
                script {
                    def browsers = ['chrome', 'firefox']
                    for (int i = 0; i < browsers.size(); ++i) {
                        echo "Testing the ${browsers[i]} browser"
                    }
                }
                echo 'hello Robots'
                sh './setup.sh'
                // catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                //     sh 'rm dist/*'
                // }
            }
            post { 
                success { 
                    echo 'I will always say Hello again!'
                    // archiveArtifacts artifacts: 'package-lock.json,dist/*.zip', fingerprint: true, allowEmptyArchive: false
                }
            }
        }
        stage('Install Latest'){
            environment {
                APPSERVER=""
                DEPLOY_LOCATION=""
                DEPLOY_SERVICENAME=""
            }
            steps {
                sh '''
                    echo "do the things"
                ''' 
            }
        }
        stage('Tests') {
            steps {
                sh './run.sh'
            }
        }
        
    }
        
    post { 
        always { 
            echo 'I will always say Hello again!'
        }
        success {
          echo "Yay, we passed."
        }
        failure {
          echo "Boo, we failed."
        }
    }
   
}